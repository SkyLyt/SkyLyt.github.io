{"meta":{"title":"SkyLyt个人博客","subtitle":null,"description":"活到老，学到老","author":"SkyLyt","url":"http://skylyt.top","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-06-20T03:00:18.709Z","updated":"2019-03-27T10:36:52.000Z","comments":false,"path":"/404.html","permalink":"http://skylyt.top//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-06-20T03:25:04.644Z","updated":"2019-06-20T03:25:04.644Z","comments":false,"path":"about/index.html","permalink":"http://skylyt.top/about/index.html","excerpt":"","text":"Java后台开发"},{"title":"书单","date":"2019-06-20T03:00:18.713Z","updated":"2019-03-27T10:36:52.000Z","comments":false,"path":"books/index.html","permalink":"http://skylyt.top/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-06-20T03:00:18.720Z","updated":"2019-03-27T10:36:52.000Z","comments":true,"path":"links/index.html","permalink":"http://skylyt.top/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-06-20T03:00:18.722Z","updated":"2019-03-27T10:36:52.000Z","comments":false,"path":"repository/index.html","permalink":"http://skylyt.top/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-06-20T04:37:52.368Z","updated":"2019-06-20T04:37:52.368Z","comments":true,"path":"categories/index.html","permalink":"http://skylyt.top/categories/index.html","excerpt":"","text":"辅助工具 Markdown 编辑阅读器"},{"title":"标签","date":"2019-06-20T03:44:33.363Z","updated":"2019-06-20T03:44:33.363Z","comments":true,"path":"tags/index.html","permalink":"http://skylyt.top/tags/index.html","excerpt":"","text":"mysqlspringmvcmybatisspringExcel POI支付宝微信短信网络爬虫网站压力测试jemeterwebSocket区块链ElasticsearchVMwareoauth2rocketmq高级工程师进阶辅助工具"}],"posts":[{"title":"数据库常用架构方案","slug":"database_architecture_solution_01","date":"2019-07-13T12:12:29.186Z","updated":"2019-07-13T12:16:25.835Z","comments":true,"path":"2019/07/13/database_architecture_solution_01/","link":"","permalink":"http://skylyt.top/2019/07/13/database_architecture_solution_01/","excerpt":"","text":"转自：https://mp.weixin.qq.com/s/YM7RjNtWxg2V-S63WzR_Ag一、数据库架构原则二、常见的架构方案三、一致性解决方案四、个人的一些见解一、数据库架构原则高可用高性能一致性扩展性 二、常见的架构方案方案一：主备架构，只有主库提供读写服务，备库冗余作故障转移用 jdbc:mysql://vip:3306/xxdb 1、高可用分析： 高可用，主库挂了，keepalive（只是一种工具）会自动切换到备库。这个过程对业务层是透明的，无需修改代码或配置。 2、高性能分析： 读写都操作主库，很容易产生瓶颈。大部分互联网应用读多写少，读会先成为瓶颈，进而影响写性能。另外，备库只是单纯的备份，资源利用率50%，这点方案二可解决。 3、一致性分析： 读写都操作主库，不存在数据一致性问题。 4、扩展性分析： 无法通过加从库来扩展读性能，进而提高整体性能。 5、可落地分析：两点影响落地使用。第一，性能一般，这点可以通过建立高效的索引和引入缓存来增加读性能，进而提高性能。这也是通用的方案。第二，扩展性差，这点可以通过分库分表来扩展。 方案二：双主架构，两个主库同时提供服务，负载均衡 jdbc:mysql://vip:3306/xxdb 1、高可用分析： 高可用，一个主库挂了，不影响另一台主库提供服务。这个过程对业务层是透明的，无需修改代码或配置。 2、高性能分析： 读写性能相比于方案一都得到提升，提升一倍。 3、一致性分析： 存在数据一致性问题。请看下面的一致性解决方案。 4、扩展性分析： 当然可以扩展成三主循环，但笔者不建议（会多一层数据同步，这样同步的时间会更长）。如果非得在数据库架构层面扩展的话，扩展为方案四。 5、可落地分析： 两点影响落地使用。第一，数据一致性问题，一致性解决方案可解决问题。第二，主键冲突问题，ID统一地由分布式ID生成服务来生成可解决问题。 方案三：主从架构，一主多从，读写分离 jdbc:mysql://master-ip:3306/xxdb jdbc:mysql://slave1-ip:3306/xxdb jdbc:mysql://slave2-ip:3306/xxdb 1、高可用分析： 主库单点，从库高可用。一旦主库挂了，写服务也就无法提供。 2、高性能分析：大 部分互联网应用读多写少，读会先成为瓶颈，进而影响整体性能。读的性能提高了，整体性能也提高了。另外，主库可以不用索引，线上从库和线下从库也可以建立不同的索引（线上从库如果有多个还是要建立相同的索引，不然得不偿失；线下从库是平时开发人员排查线上问题时查的库，可以建更多的索引）。 3、一致性分析： 存在数据一致性问题。请看下面介绍的一致性解决方案。 4、扩展性分析： 可以通过加从库来扩展读性能，进而提高整体性能。（带来的问题是，从库越多需要从主库拉取binlog日志的端就越多，进而影响主库的性能，并且数据同步完成的时间也会更长） 5、可落地分析： 两点影响落地使用。第一，数据一致性问题，一致性解决方案可解决问题。第二，主库单点问题，笔者暂时没想到很好的解决方案。 注：思考一个问题，一台从库挂了会怎样？读写分离之读的负载均衡策略怎么容错？方案四：双主+主从架构，看似完美的方案 jdbc:mysql://vip:3306/xxdb jdbc:mysql://slave1-ip:3306/xxdb jdbc:mysql://slave2-ip:3306/xxdb 1、高可用分析： 高可用。 2、高性能分析： 高性能。 3、一致性分析： 存在数据一致性问题。请看，一致性解决方案。 4、扩展性分析： 可 以通过加从库来扩展读性能，进而提高整体性能。（带来的问题同方案二） 5、可落地分析： 同方案二，但数据同步又多了一层，数据延迟更严重。 三、一致性解决方案第一类：主库和从库一致性解决方案： 注：图中圈出的是数据同步的地方，数据同步（从库从主库拉取binlog日志，再执行一遍）是需要时间的，这个同步时间内主库和从库的数据会存在不一致的情况。如果同步过程中有读请求，那么读到的就是从库中的老数据。如下图。 既然知道了数据不一致性产生的原因，有下面几个解决方案供参考： 1、直接忽略，如果业务允许延时存在，那么就不去管它。 2、强制读主，采用主备架构方案，读写都走主库。用缓存来扩展数据库读性能 。有一点需要知道：如果缓存挂了，可能会产生雪崩现象，不过一般分布式缓存都是高可用的。 3、选择读主，写操作时根据库+表+业务特征生成一个key放到Cache里并设置超时时间（大于等于主从数据同步时间）。读请求时，同样的方式生成key先去查Cache，再判断是否命中。若命中，则读主库，否则读从库。代价是多了一次缓存读写，基本可以忽略。 4、半同步复制，等主从同步完成，写请求才返回。就是大家常说的“半同步复制”semi-sync。这可以利用数据库原生功能，实现比较简单。代价是写请求时延增长，吞吐量降低。 5、数据库中间件，引入开源（mycat等）或自研的数据库中间层。个人理解，思路同选择读主。数据库中间件的成本比较高，并且还多引入了一层。 第二类：DB和缓存一致性解决方案 先来看一下常用的缓存使用方式： 第一步：淘汰缓存； 第二步：写入数据库； 第三步：读取缓存？返回：读取数据库； 第四步：读取数据库后写入缓存。 注：如果按照这种方式，图一，不会产生DB和缓存不一致问题；图二，会产生DB和缓存不一致问题，即4.read先于3.sync执行。如果不做处理，缓存里的数据可能一直是脏数据。解决方式如下： 注：设置缓存时，一定要加上失效时间，以防延时淘汰缓存失败的情况！ 四、个人的一些见解1、架构演变架构演变一：方案一 -&gt; 方案一+分库分表 -&gt; 方案二+分库分表 -&gt; 方案四+分库分表；架构演变二：方案一 -&gt; 方案一+分库分表 -&gt; 方案三+分库分表 -&gt; 方案四+分库分表；架构演变三：方案一 -&gt; 方案二 -&gt; 方案四 -&gt; 方案四+分库分表；架构演变四：方案一 -&gt; 方案三 -&gt; 方案四 -&gt; 方案四+分库分表；2、个人见解1、加缓存和索引是通用的提升数据库性能的方式； 2、分库分表带来的好处是巨大的，但同样也会带来一些问题，详见数据库之分库分表-垂直？水平？ 3、不管是主备+分库分表还是主从+读写分离+分库分表，都要考虑具体的业务场景。某8到家发展四年，绝大部分的数据库架构还是采用方案一和方案一+分库分表，只有极少部分用方案三+读写分离+分库分表。另外，阿里云提供的数据库云服务也都是主备方案，要想主从+读写分离需要二次架构。 4、记住一句话：不考虑业务场景的架构都是耍流氓。","categories":[],"tags":[]},{"title":"JAVA基础","slug":"JAVA_Foundation","date":"2019-06-24T00:48:10.755Z","updated":"2019-06-24T00:54:18.718Z","comments":true,"path":"2019/06/24/JAVA_Foundation/","link":"","permalink":"http://skylyt.top/2019/06/24/JAVA_Foundation/","excerpt":"","text":"参考：https://blog.csdn.net/m366917/article/details/52724939","categories":[],"tags":[]},{"title":"MySQL 每秒 570000 的写入，如何实现？","slug":"MySQL_with_570000_writes","date":"2019-06-21T02:10:59.322Z","updated":"2019-06-21T02:12:09.354Z","comments":true,"path":"2019/06/21/MySQL_with_570000_writes/","link":"","permalink":"http://skylyt.top/2019/06/21/MySQL_with_570000_writes/","excerpt":"","text":"参考：https://mp.weixin.qq.com/s/xpoX7G4gEEJqPG_IGkIvNQ","categories":[],"tags":[]},{"title":"Github上 10 个开源免费且优秀的后台控制面板","slug":"background_control_panels","date":"2019-06-21T02:08:48.225Z","updated":"2019-06-21T02:10:18.100Z","comments":true,"path":"2019/06/21/background_control_panels/","link":"","permalink":"http://skylyt.top/2019/06/21/background_control_panels/","excerpt":"","text":"参考：https://mp.weixin.qq.com/s/Q3_fs2Ma4dz0TDB0j7ORUA","categories":[],"tags":[]},{"title":"一文读懂分库分表的技术演进（最佳实践）","slug":"Sub-database_01","date":"2019-06-21T02:05:56.050Z","updated":"2019-06-21T02:07:45.916Z","comments":true,"path":"2019/06/21/Sub-database_01/","link":"","permalink":"http://skylyt.top/2019/06/21/Sub-database_01/","excerpt":"","text":"https://mp.weixin.qq.com/s/clQrAnxuxX_al7k6TPpgzw","categories":[],"tags":[]},{"title":"processon免费在线作图，实时协作","slug":"processon","date":"2019-06-21T02:03:30.897Z","updated":"2019-06-21T02:04:58.269Z","comments":true,"path":"2019/06/21/processon/","link":"","permalink":"http://skylyt.top/2019/06/21/processon/","excerpt":"","text":"参考：https://www.processon.com/;jsessionid=3ECA2F63126B54BCB6357FFAC0A7C021.jvm1","categories":[],"tags":[]},{"title":"SpringBoot + MyBatis + MySQL 读写分离实战","slug":"SpringBootMyBatisMySQL_rw","date":"2019-06-21T02:01:09.216Z","updated":"2019-06-21T02:02:41.719Z","comments":true,"path":"2019/06/21/SpringBootMyBatisMySQL_rw/","link":"","permalink":"http://skylyt.top/2019/06/21/SpringBootMyBatisMySQL_rw/","excerpt":"","text":"参考：https://mp.weixin.qq.com/s/QUm69SZ1E5IfEJSieuPwmw","categories":[],"tags":[]},{"title":"Spring Boot + Vue + Shiro 实现前后端分离、权限控制","slug":"SpringBootVueShiro_01","date":"2019-06-21T01:58:36.177Z","updated":"2019-06-21T02:00:35.672Z","comments":true,"path":"2019/06/21/SpringBootVueShiro_01/","link":"","permalink":"http://skylyt.top/2019/06/21/SpringBootVueShiro_01/","excerpt":"","text":"参考：https://mp.weixin.qq.com/s/czLXiMuji8WIP4tmKBDNrw","categories":[],"tags":[]},{"title":"JDK 中需要掌握的常用类库","slug":"jdkCommonClass01","date":"2019-06-21T01:41:03.561Z","updated":"2019-06-21T01:55:48.247Z","comments":true,"path":"2019/06/21/jdkCommonClass01/","link":"","permalink":"http://skylyt.top/2019/06/21/jdkCommonClass01/","excerpt":"","text":"Java 类库概念：Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库 包名以 Java 开始的包是 Java 核心包 (Java Core Package) ； 包名以 Javax 开始的包是 Java 扩展包 (Java Extension Package) ，例如 javax.swing 包； Java 类库概念：Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库 包名以 Java 开始的包是 Java 核心包 (Java Core Package) ； 包名以 Javax 开始的包是 Java 扩展包 (Java Extension Package) ，例如 javax.swing 包； 常用的 Java 核心包 (Java Core Package)java.lang Java 编程语言的基本类库 java.applet 创建 applet 需要的所有类 java.awt 创建用户界面以及绘制和管理图形、图像的类 java.io 通过数据流、对象序列以及文件系统实现的系统输入、输出 java.net 用于实现网络通讯应用的所有类 java.util 集合类、时间处理模式、日期时间工具等各类常用工具包 其它还有 java.sql 访问和处理来自于 Java 标准数据源数据的类 java.test 以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口 java.security 设计网络安全方案需要的一些类 java.beans 开发 Java Beans 需要的所有类 java.math简明的整数算术以及十进制算术的基本函数 java.rmi 与远程方法调用相关的所有类 常用的 Java 扩展包 (Java Extension Package)javax.accessibility 定义了用户界面组件之间相互访问的一种机制 javax.naming.* 为命名服务提供了一系列类和接口 javax.swing.* 提供了一系列轻量级的用户界面组件，是目前 Java 用户界面常用的包 注 1 ：最重要且常用的是 1 和 6 ，已用黑体标出的为，需重点掌握 注 2 ：在使用 Java 时，除了 java.lang 外，其他的包都需要 import 语句引入之后才能使用。 重点讲解内容：java.lang和java.util。 java.lang 包这个包称为 java 语言包，是由编译器自动引入的。程序中不必用 import 语句就可以使用。它所包含的类和接口对所有实际的 Java 程序都是必要的。 object 类 数学类 (Math) 数据类型类 线程类 字符串类 (String 类和 StringBuffer 类 ) 系统及运行类 (System 类和 Runtime 类 ) 错误和异常处理类 (Throwable 、 Exception 、 Error) 过程类 (process) java.util 包日期类、日历类（ Data 、 Calendar 、 GregorianCalendar ） 随机数类（ Random ） 位运算类（ BitSet ） 矢量类（ Vector ） 数据结构类（ Stack ） 散列表类（ Hashtable ） StringTokenizer类 包名 主要功能java.applet 提供了创建applet需要的所有类java.awt.* 提供了创建用户界面以及绘制和管理图形、图像的类java.beans.* 提供了开发Java Beans需要的所有类java.io 提供了通过数据流、对象序列以及文件系统实现的系统输入、输出java.lang.* Java编程语言的基本类库java.math.* 提供了简明的整数算术以及十进制算术的基本函数java.rmi 提供了与远程方法调用相关的所有类java.net 提供了用于实现网络通讯应用的所有类java.security.* 提供了设计网络安全方案需要的一些类java.sql 提供了访问和处理来自于Java标准数据源数据的类java.test 包括以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口java.util.* 包括集合类、时间处理模式、日期时间工具等各类常用工具包javax.accessibility 定义了用户界面组件之间相互访问的一种机制javax.naming.* 为命名服务提供了一系列类和接口javax.swing.* 提供了一系列轻量级的用户界面组件，是目前Java用户界面常用的包 常用的 Java 核心包 (Java Core Package) #####1. java.langJava 编程语言的基本类库 java.applet 创建 applet 需要的所有类 java.awt 创建用户界面以及绘制和管理图形、图像的类 java.io 通过数据流、对象序列以及文件系统实现的系统输入、输出 java.net 用于实现网络通讯应用的所有类 #####6. java.util 集合类、时间处理模式、日期时间工具等各类常用工具包 java.sql 访问和处理来自于 Java 标准数据源数据的类 java.test 以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口 java.security 设计网络安全方案需要的一些类 java.beans 开发 Java Beans 需要的所有类 java.math简明的整数算术以及十进制算术的基本函数 java.rmi 与远程方法调用相关的所有类 常用的 Java 扩展包 (Java Extension Package)javax.accessibility 定义了用户界面组件之间相互访问的一种机制 javax.naming.* 为命名服务提供了一系列类和接口 javax.swing.* 提供了一系列轻量级的用户界面组件，是目前 Java 用户界面常用的包 注 1 ：最重要且常用的是 1 和 6 ，已用黑体标出的为，需重点掌握 注 2 ：在使用 Java 时，除了 java.lang 外，其他的包都需要 import 语句引入之后才能使用。 重点讲解内容：java.lang和java.util。 java.lang 包这个包称为 java 语言包，是由编译器自动引入的。程序中不必用 import 语句就可以使用。它所包含的类和接口对所有实际的 Java 程序都是必要的。 object 类 数学类 (Math) 数据类型类 线程类 字符串类 (String 类和 StringBuffer 类 ) 系统及运行类 (System 类和 Runtime 类 ) 错误和异常处理类 (Throwable 、 Exception 、 Error) 过程类 (process) java.util 包日期类、日历类（ Data 、 Calendar 、 GregorianCalendar ） 随机数类（ Random ） 位运算类（ BitSet ） 矢量类（ Vector ） 数据结构类（ Stack ） 散列表类（ Hashtable ） StringTokenizer类 Java 类库概念：Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库 包名以 Java 开始的包是 Java 核心包 (Java Core Package) ； 包名以 Javax 开始的包是 Java 扩展包 (Java Extension Package) ，例如 javax.swing 包； Java 类库概念：Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库 包名以 Java 开始的包是 Java 核心包 (Java Core Package) ； 包名以 Javax 开始的包是 Java 扩展包 (Java Extension Package) ，例如 javax.swing 包； 常用的 Java 核心包 (Java Core Package)java.lang**Java 编程语言的基本类库 java.applet 创建 applet 需要的所有类 java.awt 创建用户界面以及绘制和管理图形、图像的类 java.io 通过数据流、对象序列以及文件系统实现的系统输入、输出 java.net 用于实现网络通讯应用的所有类 java.util** 集合类、时间处理模式、日期时间工具等各类常用工具包 其它还有 java.sql 访问和处理来自于 Java 标准数据源数据的类 java.test 以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口 java.security 设计网络安全方案需要的一些类 java.beans 开发 Java Beans 需要的所有类 java.math简明的整数算术以及十进制算术的基本函数 java.rmi 与远程方法调用相关的所有类 常用的 Java 扩展包 (Java Extension Package)javax.accessibility 定义了用户界面组件之间相互访问的一种机制 javax.naming.* 为命名服务提供了一系列类和接口 javax.swing.* 提供了一系列轻量级的用户界面组件，是目前 Java 用户界面常用的包 注 1 ：最重要且常用的是 1 和 6 ，已用黑体标出的为，需重点掌握 注 2 ：在使用 Java 时，除了 java.lang 外，其他的包都需要 import 语句引入之后才能使用。 重点讲解内容：java.lang和java.util。 原文转自：https://mp.weixin.qq.com/s/dxo_6Sd3JZgFv40pLLFsfg","categories":[],"tags":[]},{"title":"最详细的SQL Server2008 安装图解","slug":"sqlServerInstall","date":"2019-06-20T04:39:05.371Z","updated":"2019-06-20T04:48:14.092Z","comments":true,"path":"2019/06/20/sqlServerInstall/","link":"","permalink":"http://skylyt.top/2019/06/20/sqlServerInstall/","excerpt":"","text":"参考：https://blog.csdn.net/mingxuanyun/article/details/7752259","categories":[],"tags":[]},{"title":"Markdown 编辑阅读器","slug":"Markdown","date":"2019-06-19T07:45:15.658Z","updated":"2019-06-20T01:52:16.879Z","comments":true,"path":"2019/06/19/Markdown/","link":"","permalink":"http://skylyt.top/2019/06/19/Markdown/","excerpt":"","text":"Markdown 基本语法请戳此处 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 辅助工具 原文出自：https://www.zybuluo.com/mdeditor","categories":[],"tags":[]}]}